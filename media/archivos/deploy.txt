sudo systemctl restart nginx
sudo systemctl restart uwsgi

## How To Serve Django Applications with uWSGI and Nginx on Ubuntu 16.04
https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04

# ubicaciones
cd /etc/uwsgi/sites
cd /etc/nginx/sites-available/
cd /etc/nginx/sites-enabled/
cd /var/log/uwsgi/

sudo locale-gen en_US.UTF-8

# instalar pip y virtualenv
sudo apt-get update
sudo apt-get install python3-setuptools
sudo easy_install3 pip
sudo apt-get install python3-pip
sudo -H pip3 install --upgrade pip
sudo -H pip3 install virtualenv virtualenvwrapper
# setear virtualenv
echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" >> ~/.bashrc
echo "export WORKON_HOME=~/Env" >> ~/.bashrc
echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
source ~/.bashrc
# crear env, instalar django
mkvirtualenv firstsite
# /Env/closeapp/lib/python3.5/site.py, def setencoding()
# aqui el tutorial creaba el proyecto, en nuestro caso traemos de git
# volver a ambiente global
deactivate
# instalar uwsgi
sudo apt-get install python3-dev
sudo pip3 install uwsgi
# crear folder para configuration files
sudo mkdir -p /etc/uwsgi/sites
cd /etc/uwsgi/sites
# crear archivo ini
sudo nano firstsite.ini
- - - # cambiar firstsite y sammy # module = donde_este_el_settings.py . wsgi:application
# sudo mkdir -p /var/log/uwsgi
# sudo chown -R user:user /var/log/uwsgi
[uwsgi]
project = firstsite
uid = sammy
base = /home/%(uid)

chdir = %(base)/%(project)
home = %(base)/Env/%(project)
module = %(project).wsgi:application

master = true
processes = 5
logto = /var/log/uwsgi/closeapp.log

socket = /run/uwsgi/%(project).sock
chown-socket = %(uid):www-data
chmod-socket = 660
vacuum = true
- - - -
# crear carpeta para el log
sudo mkdir -p /var/log/uwsgi
# para automatizar el inicio de uwsgi al bootear
sudo nano /etc/systemd/system/uwsgi.service
- - - # cambiar sammy
[Unit]
Description=uWSGI Emperor service

[Service]
ExecStartPre=/bin/bash -c 'mkdir -p /run/uwsgi; chown sammy:www-data /run/uwsgi'
ExecStart=/usr/local/bin/uwsgi --emperor /etc/uwsgi/sites
Restart=always
KillSignal=SIGQUIT
Type=notify
NotifyAccess=all

[Install]
WantedBy=multi-user.target
- - - -
# instalar nginx
sudo apt-get install nginx
# configuration file de nginx para el proyecto
cd /etc/nginx/sites-available/
sudo nano firstsite
- - - # reemplazar firstsite, sammy y IP
server {
    listen 80 default_server;
    listen IP:80 default_server;
    listen [::]:80 default_server;
    server_name _;

    client_max_body_size 100M;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/ubuntu/platdemorden;
    }
    location /media/ {
        root /home/ubuntu/platdemorden;
    }

    location / {
        include         uwsgi_params;
        uwsgi_pass      unix:/run/uwsgi/platdemorden.sock;
    }
}
- - - -
# linkear configuration file hacia sites-enabled
sudo ln -s /etc/nginx/sites-available/firstsite /etc/nginx/sites-enabled
# no pueden haber dos sites-enabled escuchando el puerto 80
cd /etc/nginx/sites-enabled/
sudo rm default

-------------------------------------
sudo apt-get install postgresql postgresql-contrib
sudo -i -u postgres
createdb closeapp
createuser closeapp --pwprompt
CTRL-D

DB=ENGINE=django.db.backends.postgresql_psycopg2,NAME=closeapp,USER=closeapp,PASSWORD=dbprod,HOST=localhost,PORT=5432

psql
\l
-------------------------------------
cd
git clone url
sudo mv asdf2/ asdf
sudo nano closeapp.env
pip install -r requirements.txt
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py collectstatic
python manage.py runserver

sudo ufw allow 'Nginx Full'
sudo systemctl enable nginx
sudo systemctl enable uwsgi

------------------------------------

# testear que la sintaxis de la configuracion esta bien
sudo nginx -t
# restart nginx para cargar la nueva configuracion
sudo systemctl restart nginx
# iniciamos uWSGI server
sudo systemctl start uwsgi
# permitir acceso a nginx server
sudo ufw delete allow 8080
sudo ufw allow 'Nginx Full'
# activar que ambos se inicien automaticamente al bootear
sudo systemctl enable nginx
sudo systemctl enable uwsgi
- - -
sudo nginx -s quit
sudo nginx -t
# reiniciar nginx y uwsgi

sudo systemctl restart nginx
sudo systemctl restart uwsgi


# ubicaciones
cd /etc/uwsgi/sites
cd /etc/nginx/sites-available/
cd /etc/nginx/sites-enabled/
cd /var/log/uwsgi/
# error.log (poco util)
sudo tail -f /var/log/nginx/error.log
cd /var/log/uwsgi/
sudo tail -f /var/log/uwsgi/closeapp.log
# sacar de default, poner en advisor
listen 80 default_server;
listen [::]:80 default_server;
server_name _;


# testeo rapido, sirvio para ver que faltaba instalar modulos de INSTALLED_APPS
uwsgi --http :8080 --home /home/sammy/Env/firstsite --chdir /home/sammy/firstsite -w firstsite.wsgi
uwsgi --http :8080 --home /home/advisor/Env/closeapp --chdir /home/advisor/closeapp/ -w closeapp.wsgi



# desbloquear tema emails gmail
https://myaccount.google.com/security
https://accounts.google.com/DisplayUnlockCaptcha

sudo mkdir -p /var/log/uwsgi

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-16-04
https://www.linode.com/docs/databases/postgresql/use-postgresql-relational-databases-on-ubuntu-16-04

sudo netstat -nlp


if ($scheme != "https") {
    return 301 https://$host$request_uri;
} # managed by Certbot

# peso
du -m --max-depth=1 | sort -hr

